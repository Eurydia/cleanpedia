<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Operators on</title><link>https://eurydia.github.io/cleanpedia/operator/</link><description>Recent content in Operators on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://eurydia.github.io/cleanpedia/operator/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://eurydia.github.io/cleanpedia/operator/calling-operators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eurydia.github.io/cleanpedia/operator/calling-operators/</guid><description>1 2 3 // Language: Clean 1 + 1 // applied as an operator To invoke an operator as an ordinary function, the operator name must be placed inside parentheses, and in front of its arguments.</description></item><item><title>Operator Associativity</title><link>https://eurydia.github.io/cleanpedia/operator/operator-associativity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eurydia.github.io/cleanpedia/operator/operator-associativity/</guid><description>The associativity is important when evaluating two operators of the same precedence.
There are three associativities:
infix for non-associative operators, infixl for left-associative operators, and infixr for right-associative operators.</description></item><item><title>Operator Conflict</title><link>https://eurydia.github.io/cleanpedia/operator/operator-conflict/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eurydia.github.io/cleanpedia/operator/operator-conflict/</guid><description>Operators can conflict with one another.
1 2 3 4 5 6 7 8 9 10 // Language: Clean (&amp;lt;=&amp;gt;) infixl 9 :: Bool Bool -&amp;gt; Bool (&amp;lt;=&amp;gt;) True True = True (&amp;lt;=&amp;gt;) False False = True (&amp;lt;=&amp;gt;) _ _ = False (--&amp;gt;) infixr 9 :: Bool Bool -&amp;gt; Bool (--&amp;gt;) True False = False (--&amp;gt;) _ _ = True It is not allowed to apply operators with equal precedence in an expression in such a way that their associativity conflict.</description></item><item><title>Operator Precedence</title><link>https://eurydia.github.io/cleanpedia/operator/operator-precedence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eurydia.github.io/cleanpedia/operator/operator-precedence/</guid><description>The precedence determines how tightly an operator binds to its argument. Precedence can be between zero and nine with higher number having higher precedence.</description></item><item><title>operator-definition</title><link>https://eurydia.github.io/cleanpedia/operator/operator-definition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eurydia.github.io/cleanpedia/operator/operator-definition/</guid><description>An operator can be defined by placing its name between parentheses. It can be implemented as if it was an ordinary function.</description></item><item><title>Typing Operators</title><link>https://eurydia.github.io/cleanpedia/operator/typing-operators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eurydia.github.io/cleanpedia/operator/typing-operators/</guid><description>A control operator definition may be explicitly typed as follows.
1 2 3 4 // Language: Clean (operator) :: paramLType paramRType -&amp;gt; expressionType (operator) paramL paramR = expression In addition, operator associativity (A) and precedence (P) may be specified as well.</description></item></channel></rss>